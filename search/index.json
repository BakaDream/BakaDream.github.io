[{"content":"0. 前言 本文主要依据Dev on Windows with WSL(下文简称WSL中文指南)以及互联网上其它的WSL2配置指南编写。\n由于WSL中文指南Github库已于2022年归档，至撰写此文时间(2024/10/20)小部分内容已经过时,笔者的部分需要无法满足，所以撰写本文用于记录笔者配置基于WSL2的开发环境的过程，以供参考。\nWSL中文指南是非常优秀的中文 WSL 开发环境配置指南，其对WSL的概念、产生背景、作用、安装，以及使用WSL2作为开发环境的优点等进行了非常生动形象、详细的介绍，本文不再赘述。\n1. 安装WSL2 Ubuntu 1.1 检查自己的windows版本是否支持安装WSL2 You must be running Windows 10 version 2004 and higher (Build 19041 and higher) or Windows 11 to use the commands below.\n据官网所述，你需要检查你的Windows系统版本，笔者系统是Windows11专业版 23H2,显然是可以安装的。\n笔者建议使用Window11 专业版,Windows10自从发布至今近10年了，并且Windows 10 将在 2025 年 10 月 14 日终止支持。\n1.2 开启支持 WSL 2 的可选组件 在Windows下搜索启用或关闭 Windows功能 并打开。如下图所示\n勾选 适用于WIndows的Linux子系统 与** 虚拟机平台**。如下图所示\n然后按照系统指示重启系统即可。\n1.3 在自定义目录安装ubuntu 发行版 在WSl中文指南所示的WSl安装教程所安装的unbuntu子系统是安装在C盘中的，我们的C盘存储空间不足所以我们需要将Ubuntu子系统安装在其它磁盘上。\n首先打开PowerShell,在终端(WSL中文指南有终端相关介绍)里输入wsl --set-default-version 2来设置新安装的发行版均设置为默认由 WSL 2 支持。\n如下图所示即为启用成功。\n然后在终端里运行wsl --update 当提示已安装最新版本的适用于 Linux 的 Windows 子系统。即为安装成功。\n我们从[手动下载适用于 Linux 的 Windows 子系统发行版包]下载Ubuntu发行版,\n下载完成后,可以得到一个拓展名为.appx的文件↓\n把它的拓展名改为.zip，然后用压缩软件打开，由下图可见，压缩包里有很多拓展名为.appx的文件，我们选择带有x64的解压下来，然后把它的拓展名改为.zip\n打开它,然后解压到想要安装WSL的目录下，我们可以得到一些文件。\n我们双击ubuntu.exe，他就会进入安装。等待一小段时间后，它会提示你设置用户名密码，我们输入用户名，然后输入密码，并重复输入一次密码。(在终端里输入密码，密码并不会显示，所以要牢牢记住你设置的密码。)\n设置完成后，我们的Ubuntu发行版即安装成功。同时，我们的安装目录下多了一个名为ext4.vhdx的文件,这个文件便是我们安装的Ubuntu系统打虚拟磁盘。\n此时，除了这个文件之外，其余的文件我们都可以删除。\n1.4 验证WSL2 Ubuntu发行版是否安装成功 重新打开一个powershell终端，输入wsl -l --all -v，我们可以看到我们的Ubuntu发行版已经按照成功，并且是WSL2。\n2. 配置开发环境 2.1 更换软件源镜像 这里并不提供软件源以及包管理器的介绍，请参考WSL中文指南的介绍。\n为了简化我们的换源操作，我们这里使用由LinuxMirrors提供的一键换源脚本。\n我们在终端里输入sudo -i，然后输入密码后进入root用户,接着在终端输入bash \u0026lt;(curl -sSL https://linuxmirrors.cn/main.sh)然后回车执行，按照终端里的提示进行操作，这里我使用中国科学技术大学提供的软件源。\n如果你想要保持软件包最新话可以在终端输入 sudo apt upgrade -y进行更新操作。\n2.2 安装Liunx GUI程序 以Warp-Terminal为例 打开Warp Terminal官网Download | Warp,下载Linux deb格式的软件包\n等待下载完成后,我们打下载的文件从Download目录里拷贝到Linux的用户目录里,如下图所示，我们可以很容易地在Windows文件资源管理器里对WSL系统地文件进行操作。\n进入Ubuntu子系统的目录后，点击home接着点击dream(这里换成你的用户名),把文件粘贴到此处。\n回到我们的终端里，输入sudo dpkg -i warp-terminal-xxxx.pkg(⚠注意把warp-terminal-xxxx.pkg换成你实际下载的文件的文件名)。\n接着输入你的密码，等待一小段时间，会提示你有部分依赖未安装，接着输入sudo apt --fix-broken install让apt查找并尝试自动下载和安装缺失的依赖项，等待修复完成。\n最后，我们重新输入sudo dpkg -i warp-terminal-xxxx.pkg，等待安装完成。\n安装完成后，我们按Windos徽标键，在开始菜单里找到Warp Terminal，打开它。\n点击Sign up 登录你的账户,登录成功之后，点击Click here复制token\n回到我们的warp Terminal，点击Click here to paste your token from the browser。\n如果Warp Terminal没自动识别到你剪切板里的token，你需要把复制的token粘到输入框内。\n然后我们点击Skip，跳过提供个人信息即可进入我们的Warp Terminal。\n从此开始，下午终端代指Warp Terminal\n2.3 更换shell为zsh 使用APT安装zsh\n在终端内输入sudo apt install zsh -y，等待执行完成.\n安装oh-my-zsh\n从Oh My Zsh - a delightful \u0026amp; open source framework for Zsh复制安装命令sh -c \u0026quot;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\u0026quot;粘贴到终端执行\n如下图所示,安装脚本会提示我们是否需要切换默认shell为zsh 我们输入y回车,等待脚本执行完毕\n3.配置编程语言开发环境 Python 这里我们使用Rye 作为python的环境管理工具\n在终端里输入一下命令\n1 curl -sSf https://rye.astral.sh/get | bash 如下图所示,我们选择Contine Yes， Run a Python installed and managed by Rye 最后Should the installer add Rye to PATH via .profile 选择yes\n打开终端并执行以下命令以编辑 ~/.zprofile 文件：\n1 nano ~/.zprofile 在 ~/.zprofile 文件中添加以下内容：\n1 2 # 加载 Rye 环境 source \u0026#34;$HOME/.rye/env\u0026#34; 按 Ctrl + O 保存文件，然后按 Enter 确认。接着按 Ctrl + X 退出 nano 编辑器。\n运行以下命令使 .zprofile 文件的修改立即生效：\n1 source ~/.zprofile 这样，每次登录时，系统都会自动加载 Rye 的环境。\nNode.js fnm\nsudo apt install unzip\ncurl -fsSL https://fnm.vercel.app/install | bash\nsource /home/dream/.zshrc\n参考文献 Dev on Windows with WSL\n适用于 Linux 的 Windows 子系统文档 | Microsoft Learn\n如何在 Windows 10 上安装 WSL 2 - 知乎\n自定义WSL的安装位置，别再装到C盘啦 - 知乎\nLinuxMirrors · 使换源更简单 - LinuxMirrors\n","date":"2024-10-21T16:51:00+08:00","permalink":"https://blog.132632.xyz/p/wsl2-intro-%E5%9C%A8windows%E4%B8%8B%E9%85%8D%E7%BD%AE%E5%9F%BA%E4%BA%8Ewsl2%E7%9A%84%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/","title":"[WSL2 intro] 在windows下配置基于WSL2的开发环境"},{"content":"1. 安装miniconda 书接上文\n2. 安装CUDA和CUDNN CUDA（Compute Unified Device Architecture），是显卡厂商NVIDIA推出的运算平台。CUDA™是一种由NVIDIA推出的通用并行计算架构，**该架构使GPU能够解决复杂的计算问题。**它包含了CUDA指令集架构（ISA）以及GPU内部的并行计算引擎，安装cuda之后，可以加快GPU的运算和处理速度。\nCUDNN是一个常见的神经网络层加速库文件，能够很大程度把加载到显卡上的网络层数据进行优化计算，而CUDA就像一个很粗重的加速库，其主要依靠的是显卡。CUDNN需要在有CUDA的基础上进行，CUDNN可以在CUDA基础上加速2倍以上。\n1、准备工作: 查看本机的CUDA驱动适配版本 判断自己电脑是否有英伟达的独显 Win+R输入cmd打开终端 在终端里输入nvidia-smi 可以看到本机的CUDA版本是12.4 2、安装CUDA Tookit: CUDA Toolkit Archive | NVIDIA Developer\n点击对应版本 我这下载Last Release就好\n顺序点击1-2-3-4-5等待下载框弹出\n打开安装包选择安装路径，默认即可；是安装包解压路径，CUDA安装完毕文件会自动删除\n然后不改变任何选项，安装完即可\n**验证安装成功：**PowerShell（或cmd）输入命令nvcc -V，返回如下截图，表示安装成功。\n3、 安装CUDNN 进入官网cuDNN 9.1.0 Downloads | NVIDIA Developer\n根据图示，依次点击1-2-3-4-5\n将下载文件解压后放换到NVIDIA GPU Tookit（C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.4）里\n验证是否安装成功：“C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v12.4\\extras\\demo_suite\u0026gt;”，然后分别运行里的 bandwidthTest.exe和deviceQuery.exe，有PASS即代表成功\n3. 创建深度学习专用虚拟环境并安装相关包 1、创建虚拟环境 打开cmd（管理员）\n输入conda create -n deeplearning python=3.12\n等待安装成功\n输入conda activate deeplearning 进入deeplearning的虚拟环境\n2、安装jupyter notebook 参考了Anaconda安装Jupyter Notebook及使用_conda安装jupyternotebook-CSDN博客\n还是在刚刚那个终端中 输入conda install jupyter notebook 输入y 确认安装 等待安装完成即可\n安装汉化: 在刚刚的终端中输入pip install jupyterlab-language-pack-zh-CN\n打开jupyter notebook: 在刚刚的终端中输入jupyter notebook 等待浏览器窗口自动打开\n切换汉化包： 依次点击1-2-3 然后点击reload 重新加载即可\n3、安装pytorch 打开官网: Start Locally | PyTorch\n依次点击1-2-3-4-5 然后复制6处的命令\n把6处的命令粘贴到终端里 回车，进行安装\n验证pytorch是否安装成功: 还是在刚刚的终端里，依次输入如下命令，有如图所示的结果即为安装成功\n1 2 3 python import torch print(torch.__version__) 输入exit()即可退出python解释器\n参考文章 Windows 11 搭建GPU版本PyTorch环境详细过程 - 知乎 (zhihu.com)\n深度学习—windows10的CUDA安装和jupyter配置教程，超全 - 知乎 (zhihu.com)\npytorch gpu运行安装重点（CUDA12.3）_cuda12.3对应的pytorch版本-CSDN博客\nAnaconda安装Jupyter Notebook及使用_conda安装jupyternotebook-CSDN博客\nAnaconda-用conda创建python虚拟环境 - 知乎 (zhihu.com)\n环境配置：选择正确版本的CUDA和PyTorch安装(windows) - 知乎 (zhihu.com)\n","date":"2024-04-27T21:00:00+08:00","permalink":"https://blog.132632.xyz/p/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/","title":"深度学习虚拟环境配置"},{"content":"1.安装miniconda 去miniconda官网下载 Miniconda — Anaconda documentation\n安装完成之后，打开Anaconda Prompt 设置conda镜像（清华源）\n1 2 conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/ conda config --set show_channel_urls yes 添加以下三条环境变量\nC:\\Environment\\miniconda3\nC:\\Environment\\miniconda3\\Library\nC:\\Environment\\miniconda3\\Scripts\n2. 安装pipx 打开Anaconda Prompt\n输入\n1 python -m pip install --user pipx 3.根据警告提示 cd到C:\\Users\\25074\\AppData\\Roaming\\Python\\Python312\\Scripts\n运行\n1 .\\pipx.exe ensurepath 3. 安装poetry 打开Anaconda Prompt 输入pipx install poetry pipx ensurepath ","date":"2024-03-17T22:34:00+08:00","permalink":"https://blog.132632.xyz/p/windows%E4%B8%8Bpython%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97/","title":"Windows下python环境安装指南"},{"content":"Armbian TF卡扩容分区步骤 前情提要:\n我购买的黑豹X2附带的TF卡中已经带有系统，即使我给eMMC刷入了系统，它仍然会从TF卡启动。因此，在备份完TF卡内容后，我计划将系统配置为从eMMC启动并扩展分区。\n还有一个原因，eMMC相比TF卡速度稍快。\n准备过程 DiskGenius软件 读卡器 详细步骤 将TF卡插入读卡器，并连接到电脑上。\n使用DiskGenius删除TF卡上的分区表。\n将TF卡插入Armbian设备。\n打开终端，输入 lsblk 命令查看设备信息（根据存储大小来查找设备，例如我的设备是mmcblk0）。\n使用 fdisk 命令对TF卡进行分区操作：\n1 sudo fdisk /dev/mmcblk0 a. 输入 o，创建一个新的DOS分区表。\nb. 输入 n，创建一个新分区。\nc. 按照提示输入分区号、起始扇区（默认为2048）和结束扇区，以使用整个可用空间。按回车键接受默认值即可。\nd. 输入 w，将更改写入磁盘并退出fdisk。\n将TF卡的分区格式化为ext4文件系统：\n1 sudo mkfs.ext4 /dev/mmcblk0p1 创建要挂载该分区的目录（例如我创建了 /sdcard 目录）：\n1 sudo mkdir /sdcard 进行挂载操作：\n1 sudo mount /dev/mmcblk0p1 /sdcard 使用 df -h 命令验证挂载情况：\n实现开机自动挂载：\na. 打开终端，并使用文本编辑器打开 /etc/fstab 文件（例如：sudo nano /etc/fstab）。\nb. 在文件末尾添加以下一行，指定SD卡分区的挂载信息：\n1 /dev/mmcblk0p1 /sdcard ext4 defaults 0 0 替换 /dev/mmcblk0p1 为实际的SD卡分区路径。 替换 /sdcard 为期望挂载到的目标目录。 如果不确定分区的文件系统类型，请确认分区的文件系统类型（如ext4、FAT32等）。 defaults 表示使用默认挂载选项，你也可以根据需要修改挂载选项，例如添加 ro 表示只读挂载或其他适当的选项。 0 0 这两个数字用于设置文件系统检查顺序和备份频率，大部分情况下将它们设置为 0 0 即可。 c. 保存并关闭 /etc/fstab 文件。\n现在，下次启动系统时，SD卡分区应该会自动挂载到指定的目标目录。\n","date":"2023-07-14T21:01:01Z","permalink":"https://blog.132632.xyz/p/%E8%AE%B0%E4%B8%80%E6%AC%A1armbian-tf%E5%8D%A1%E6%89%A9%E5%AE%B9%E5%88%86%E5%8C%BA/","title":"记一次armbian TF卡扩容分区"},{"content":"最近想把刷机|搞机的工具安装在单独的系统，所有的文件、驱动都放在一起容易BUG，\n偶尔了解到了 VHDX虚拟系统这种东西，准备就此尝试一下。\n1. 准备工具 系统镜像\n工具软件 Dism++ 、EasyBCD\n2\n2. 实践 1. 创建虚拟磁盘 右键开始菜单，点击磁盘管理\n","date":"2023-07-06T23:00:00+08:00","permalink":"https://blog.132632.xyz/p/%E8%AE%B0%E4%B8%80%E6%AC%A1vhdx%E8%99%9A%E6%8B%9F%E7%A1%AC%E7%9B%98%E5%8F%8C%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%B0%9D%E8%AF%95/","title":"记一次VHDX虚拟硬盘双系统的尝试"},{"content":"Realme V15 玩机指南 解BL锁 1.下载深度测试 并安装（UI1.0 2.0）\n2.申请深度测试 申请通过后点击 开始深度测试\n3.此时已经进入bootloader模式 我们开始解锁BL\n​\t打开CMD命令行(platform-tool) 注意：请安装驱动，即使安装后也建议重新安装一次，否则可能会有奇奇怪怪的问题\n在命令行输入以下内容，回车\n1 fastboot flashing unlock 按音量上键\n在命令行输入以下内容，回车\n1 fastboot reboot 等待进入系统\nBL已经解锁完成\n不能进入深度刷机MTk刷机模式 使用MTk720，800u系列一键破解端口刷入原来的能用的preloader\n如果进入恢复模式，格式化data即可\n刷回UI1.0 并解除DM验证 （确保安装USBDk，安卓驱动，以下两个文件内可能有）\n使用深刷救砖包或者联发科brom工具箱 ，进入brom模式，根据深刷救砖包，指示刷机，等待跑完进度，用工具箱的功能回缩Bl （跟上面一样,如果进入恢复模式，格式化data即可）\n","date":"2023-07-04T20:13:33+08:00","permalink":"https://blog.132632.xyz/p/realme-v15%E7%8E%A9%E6%9C%BA%E6%8C%87%E5%8D%97/","title":" Realme V15玩机指南"},{"content":"0x01. SQL简介与安装 1.概述 SQL(Structured Query Language) 结构化查询语言 ， 用于访问和处理数据库的标准计算机语言。\n特点:\n统一性，不同的数据库稍有不同 非过程化语言 语言简洁 可以与其他语言结合 语法特点:\n对关键字的大小写不敏感\n可以单行或多行书写 以;结束\n注释\n1 2 3 4 -- 单行注释 -- /* 多行注释 */ 数据库系统\n关系型数据库(RDBMS): MYSQL等 非关系型数据库(NoSQL): Redis等 2.安装 1 2 3 4 5 6 7 8 9 10 11 12 #初始化 mysqld --initialize --user=mysql --console 安装MySQL服务 mysqld --install #(管理员身份运行) #开启服务 net start mysql #登录 mysql -uroot -p #修改root密码 ALTER USER \u0026#39;root\u0026#39;@\u0026#39;localhost\u0026#39; IDENTIFIED WITH mysql_native_password BY \u0026#39;新密码\u0026#39; ; #修改root权限 create user \u0026#39;root\u0026#39;@\u0026#39;%\u0026#39; IDENTIFIED WITH mysql_native_password BY \u0026#39;密码\u0026#39;; 3.删除 1 2 3 4 5 6 7 8 9 10 11 12 1.停止服务 2.删除文件 3.卸载mysql 4.删除C:\\ProgramData\\MYSQL 所有文件 (可选) 5.删除注册表 HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Services\\Eventlog\\Application\\MySQL HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\EventLog\\Application\\MySQL HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControl001\\Services\\MySQL 6.删除环境变量 7.删除mysql服务 cmd里 sc delete MYSQ 0x02. MYSQL基本操作-DDL 1.DDL解释 DDL(data definition Language)数据定义语言,包括:\n对数据库的常用操作 对表结构的常用操作 修改表结构 2.对数据库的常用操作 功能 SQL 查看所有的数据库 show databases ; 创建数据库 create database [if not exists] mydb1 [charset=utf8] ; #[]里的内容代表可以省略 切换 数据库 use mydb1 ; 删除数据库 drop database [if exists] mydb1 ; 修改数据库编码 alter database mydb1 character set utf8 ; 3.创建表 1 2 3 4 5 create table [if not exists] 表名 ( 字段1 类型[(宽度)] [约束条件] [comment \u0026#39;字段说明\u0026#39;], 字段2 类型[(宽度)] [约束条件] [comment \u0026#39;字段说明\u0026#39;], 字段3 类型[(宽度)] [约束条件] [comment \u0026#39;字段说明\u0026#39;], )[表的一些设置]; 4.数据类型 1).数值类型 decimal(M,D) 例如decimal(5,2) 5位数，2位小数\n无符号的在类型后加 unsigned\n2).日期和时间类型 3).字符串类型 3.对表的常用操作-其他操作 1 2 3 4 5 6 7 8 #查看当前数据库所有的表 show tables; #查看指定某个表的创建语句 show create table 表名; #查看表结构 desc 表名; #删除表 drop table 表名; 4.修改表结构格式 1 2 3 4 5 6 7 8 #修改表添加列 alter table 表名 add 列名 类型(长度) [约束]; #修改列名和类型 alter table 表名 change 旧列名 新列名 类型(长度) [约束]; #删除列 alter table 表名 drop 列名; #修改表名 rename table 旧名 to 新名; 0x03 MYSQL基本操作-DML 1. 基本介绍 DML ,Data manipulation language\n即增删改\n2.数据插入insert 1 2 3 insert into 表(列1,列2,列3) values(值1,值2，值3),(第二行的值); insert into 表 values(值1,值2,值3),(第二行的值); #字符串和日期要用单引号括起来 3.数据修改 update 1 2 update 表名 set 字段名=值, 字段名=值·····; update 表名 set 字段名=值, 字段名=值 where 条件; 4.数据删除 1 2 3 4 # 删除符合条件的行 没有条件就是删除表内所有数据 delete from 表名 [where 条件]; #清空表 truncate类似drop table后再创建一个新的表 truncate table 表名; 或 truncate 表名; 0x04 MYSQL 约束 1.基本介绍 约束: constraint\n即表中数据的限制条件\n作用: 表再设计的时候加入约束的目的就是为了保证表中记录完整性和有效性，比如用户表中有些值不能为空，有些列的值（id）不能重复.\n主键约束 自增长约束 非空约束 唯一性约束 默认约束 零填充约束 外键约束 2. 主键约束(PRIMARY KEY) 特性：唯一且不为\t空(NULL)\n操作-添加单列主键\n在定义字段时同时指定主键，在定义完字段后指定主键\n1 2 3 4 5 6 7 8 9 10 11 12 13 # 方式1. 在create table语句中，通过Primary key 关键字指定主键 creaste table 表名( ...... 字段名 数据类型 Primary key, ...... ); # 方式2 在定义完字段后指定主键 注意：不是创建完表之后 create table 表名( 一些字段定义, ...... [constraint 约束名] pk1 primary key(字段名), ..... ); ","date":"2023-04-19T00:01:00+08:00","permalink":"https://blog.132632.xyz/p/sql%E5%AD%A6%E4%B9%A0%E6%95%99%E7%A8%8B/","title":"SQL学习教程"},{"content":"课程结构\n第一章 Linux创始人 Linus\nLinux 内核提供系统调度\n应用程序 帮助用户使用\nLinux Kernel 官网 www.kernel.org\n中科大源 mirrors.ustc.edu.cn（我从这里下载的，不到一分钟就够了）\n虚拟机VMware\nCentos官网www.centos.org\nssh工具 openssh xshell finalshell\n第二章 基本操作命令入门 ls命令( list directory contents**)**\n1 ls [-h -l -a] 文件路径 -a 全部文件 -l 列表显示 -h 使文件信息更易读 touch命令( 创建一个文件**)**\n1 touch 文件路径 查看文件内容cat more\n​\t1.直接查看文件内容\n1 cat 文件路径 ​\t2.翻页查看文件内容(按Q退出)\n1 more 文件路径 复制删除移动文件(文件夹)\n​\t1.cp命令 复制文件\n1 cp [-r] 参数1 参数2 -r表示文件夹 参数1被复制的目录 参数2表示要复制去的地方 ​\t2.mv命令 移动文件\n1 mv 被移动的 要粘贴的 ​\t3.rm命令 删除文件\n1 rm [-r -f] 参数1 2 3 4 ..... -r 表示文件夹 -f 表示强制删除 which 命令 用来查找命令的程序本土文件的路径\n1 which 要查找命令 find命令\n1.文件名查询\n1 find 起始路径 -name \u0026#34;被查找的文件名\u0026#34; find能使用通配符匹配 只有 *符号 表示任意内容 test* 表示任意以test开头的 *test 任意以test结尾的 test 任意包含test的 2.按文件大小查询\n1 find 起始路径 -size +或-n[kmg] +,-表示大于和小于 n表示大小数字 kmg表示大小单位 k表示kb M表示MB G表示GB ​\texample:\n​\tfind / -size -10k\ngrep命令 从文件中通过关键字过滤文件行\n1 grep [-n] 关键字 文件路径 -n 可选，在结果显示被过滤处内容 的行号 关键字，必填，表示过滤的关键字，带有空格或其他特殊符号用**\u0026quot;\u0026quot;**将关键字围住 文件路径，必填，表示要过滤内容的文件路径，可作为内容输入端口 wc命令 统计文件的行数、单词数量等\n1 wc [-c -m -l -w] 文件路径 -c 统计byte数量 输出： 字节数 文件名 -m统计字符数量 输出： 字符数 文件名 -l统计行数 -w 统计单词数量 不加选项使用命令输出：行数 单词数量 字节数 文件名 echo命令 用来在命令行中输出指定的内容\n1 echo 输出的内容 复杂内容可用 \u0026quot; \u0026quot; 包围 通过反引号格式化输出 反引号包围内的命令会被执行 结果被输出 管道符 |\n将管道符左边命令的结果，作为右边命令的输入 重定向符\n\u0026gt; 将左侧命令结果 覆盖写入到右侧文件中 \u0026gt;\u0026gt; 将左侧命令结果 追加写入到符号右侧命令中 tail命令 查看文件尾部内容\n1 tail [-f -num] 文件路径 -f 表示持续追踪 -num 表示查看尾部多少行，num替换为对应的数字（默认10行） 通过ctrl + c 退出 vi\\vim编辑器的使用 工作模式 命令模式(Command mode) ​\t命令模式下，所敲的按键 编辑器都理解为命令，以命令驱动器执行不同的功能，此模式下不能自由进行文本编辑\n输入模式(Insert mode) ​\t即编辑模式、插入模式 此模式下能自由编辑文件内容\n底线模式(Last line mode) ​\t以**:**开始,通常用于文件的保存、退出\n1 vim 文件路径 根据此命令 修改文件\n命令模式： 用户刚刚启动 vi/vim，便进入了命令模式。\n此状态下敲击键盘动作会被Vim识别为命令，而非输入字符。比如我们此时按下i，并不会输入一个字符，i被当作了一个命令。\n以下是常用的几个命令：\ni 切换到输入模式，以输入字符。 x 删除当前光标所在处的字符。 : 切换到底线命令模式，以在最底一行输入命令。 若想要编辑文本：启动Vim，进入了命令模式，按下i，切换到输入模式。\n命令模式只有一些最基本的命令，因此仍要依靠底线命令模式输入更多命令。\n输入模式 在命令模式下按下i就进入了输入模式。\n在输入模式中，可以使用以下按键：\n字符按键以及Shift组合，输入字符 ENTER，回车键，换行 BACK SPACE，退格键，删除光标前一个字符 DEL，删除键，删除光标后一个字符 方向键，在文本中移动光标 HOME/END，移动光标到行首/行尾 Page Up/Page Down，上/下翻页 Insert，切换光标为输入/替换模式，光标将变成竖线/下划线 ESC，退出输入模式，切换到命令模式 底线命令模式\n在命令模式下按下:（英文冒号）就进入了底线命令模式。\n底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。\n在底线命令模式中，基本的命令有（已经省略了冒号）：\nwq保存并退出 q 退出 q!强制退出 w 报错 set nu 显示行号 set paste 设置粘贴模式 按ESC键可随时退出底线命令模式。 第三章Linux用户和权限 1.root用户与su sudo root用户即为超级管理员\n普通用户切换为root用户\n1 su [-] [username] #su(Switch User) [-] 可选 表示是否在切换用户后加载环境变量\nusername 用户名 省略表示切换到root\n输入exit命令可以退回上一个用户 也可以 ctrl+d\n1 sudo 其他命令 使用sudo命令，为普通的命令授权，临时以root身份运行\n不是所以的用户，都有权利使用sudo，需要为普通用户配置sudo认证\n为普通用户配置sudo认证（在root用户下）\n1 2 3 4 5 6 #打开 /etc/sudoers visudo #在文件最后添加 username ALL=(ALL)\tNoPASSWD:ALL #最后的NOPASSWD:ALL 表示使用sudo命令无需密码 :wq #保存 2.用户与权限组 Linux系统可以:\n配置多个用户 配置多个用户 用户可以加入多个用户组中 用户(组)管理(以下命令用root用户执行)\n创建用户组 groupadd 用户组名\n删除用户组 groupdel 用户组名\n创建用户 useradd [-g -d] 用户名\n-g 指定用户的组，不指定-g，会创建同名的组并自动加入，指定-g需要组已经存在，如已存在同名组，必须使用-g -d 指定用户的home路径，不指定， home路径默认在：/home/用户名 删除用户 userdel [-r] 用户名\n-r 删除用户的HOME 目录，不使用-r，删除用户时，HOME目录保留 查看用户所属组 id [用户名]\n用户名即被查看的用户，如不提供则产看自身 修改用户所属组 usermod -aG 用户组 用户名\n即将用户加入指定的用户组 查看系统中的用户 getent passwd\n输出共有7份信息: 用户名:密码(x):用户ID:组ID:描述信息(无用):HOME目录:执行终端(默认bash) 查看系统中的用户组 getent group\n3份信息,组名称:组认证(x):组ID: 3.查看权限控制信息 ls -l以列表形式查看内容,并显示权限细节\n文件和文件夹的权限信息(开头为d的为文件夹) 所属用户 所属用户组 权限信息\n1 2 3 4 5 6 7 8 9 10 -或d或l r或- w或- x或- r或- w或- x或- r或- w或- x或- 第一个槽位 -表示文件 d表示文件 l表示软链接 2-4 为所属用户权限 5-7 为所属用户组权限 8-10 为其他用户权限 r表示读权限(针对文件夹，可以查看文件夹内容如 ls) w表示写权限(针对文件夹表示可以在文件夹内进行创建修改等操作) x表示执行权限(针对文件夹表示可以更改工作目录到此文件夹，即cd进入) -表示无权限 4.修改权限控制 chmod命令\n1 chmod [-R] 权限 文件或文件夹 选项-R 对文件夹内的全部内容应用同样的操作\nexample\n1 chmod u=rwx,g=rx,o=x hello.txt #将文件权限修改为rwxr-x--x 其中u表示user所属用户权限，g表示group权限，o表示other其他用户权限 1 chmod -R u=rwx,g=rx,o=x test #将文件夹以及文件夹内全部内容权限 数字 对应字母 权限 0 \u0026mdash; 无权限 1 \u0026ndash;x 只能执行 2 -w- 只可写 3 -wx 执行和写 4 r\u0026ndash; 只读 5 r-x 读和运行 6 rw- 读写 7 rwx 读写运行 1 chmod 755 test.txt chown命令\n使用chown命令，可以修改文件、文件夹所属用户和用户组\n此命令只适用于root用户\n1 chown [-R] [用户][:][用户组] 文件或文件夹 -R 同chmod\n用户 用于修改所属用户\n用户组 修改所属用户组\n：用于分割用户和用户组\n1 2 3 4 chown root hello.txt chown :root hello.txt chown root:baka hello.txt chown -R root test 第四章 Linux使用操作 1.各类快捷键 ctrl + c 强制停止 / 退出当前命令输入\nctrl + d 退出账号登陆 或退出某些程序专属界面例如python 不能用于vim/vi\nhistory 此命令用来查看历史输入过的命令\n!命令开头自动执行上一个匹配前缀的命令 例如执行过一次python 再输入!py就能匹配到python并执行\n!数字 例如通过history 查看到169是执行的clear 输入!169 就会执行clear\nctrl + l终端清屏\n光标移动相关\nctrl + r输入内容去匹配历史命令\nctrl + a 跳到命令开头\nctrl + e跳到命令结尾\nctrl + ← 向左跳一个单词\nctrl + →向右跳一个单词\n2.用yum或apt安装软件 yum命令\nRPM包软件管理器，用于自动化安装配置软件，并自动解决依赖问题\n1 yum [-y] [install|remove|search] 软件名 -y 自动确认 install安装 remove卸载 search搜索 yum需要root权限 用root用户 或sudo 还需要联网\napt命令\ndeb包软件管理器，用于自动化安装配置软件，并自动解决依赖问题\n1 apt [-y] [install|remove|search] 软件名 -y 自动确认 install安装 remove卸载 search搜索 apt需要root权限 用root用户 或sudo 还需要联网\n3.systemctl控制软件启动关闭 1 systemctl start | stop | status | enable | disable 服务名 start启动 stop关闭 status查看状态 enable允许开机自启 disable关闭开机自启 4.软链接 1 ln -s 参数1 参数2 -s 创建软链接 参数1 被链接的文件或文件夹 参数2 要链接去的目的地 5.日期和时区 在命令行中查看系统的时间\n1 date [-d] [+格式化字符串] -d 按照给定的字符串显示日期，一般用于日期计算\n支持的时间标记: year年 month月 day日hour小时minute分钟second秒\n1 date -d \u0026#34;+1 year +1 day\u0026#34; \u0026#34;+%Y-%d\u0026#34; 格式化字符串\n%Y 年 %y 年份后两位数字 %m 月份(01-12) %d 日 (01-31) %H 小时 (00-23) %M 分钟 (00-60) %S 秒 （00-60） %s 时间戳 自1970-01-01 00：00：00UTC到现在的秒数 修改Linux日期/时区\n执行以下命令 修改为东八区 1 2 rm -f /etc/localtime sudo ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime 2.通过ntp自动校准时间\n1 yum install ntp 启动并设置开机自启\n1 2 systemctl start ntpd systemctl enable ntpd 手动使用ntp校准\n1 ntpdate -u ntp.aliyun.com 6.IP地址、主机名 IP地址\n使用ifconfig查看ip地址 如无法使用 yum install -y net-tools\n127.0.0.1 用于代指本机 0.0.0.0 特殊ip地址 用于代指本机 可以在端口绑定中用来确定绑定关系 在一些ip地址限制中，表示所以ip限制的意思，如果放行规则设置为0.0.0.0表示允许任意ip访问 主机名\nwindows在系统设置查看\nLinux使用hostname查看\n​\tLinux修改主机名\n1 hostnamectl set-hostname 名字 域名解析\n​\t修改host文件 或者买域名\n8.网络请求 ping\n1 ping [-c num] ip或主机名 -c检查的次数 不指定次数将无限次检查\n1 ping -c 3 baidu.com wget\n1 wget -b url -b 后台下载，并将日志写再当前工作目录中的wget-log中 curl\ncurl可以发送网络请求。可以用于：下载文件获取信息等\n1 curl [-O] url -O 当下载文件时，可用次选项保存文件 9.端口 支持端口0-65535\n公认端口1-1023 用于一些系统内置或知名程序的预留使用 如22,443\n注册端口1024-49151\n动态端口49152-65535\n查看端口占用\n1 yum -y install nmap 1 nmap ip地址 1 netstat -anp | grep 端口号 #查看指定端口的占用情况 10.进程管理 查看进程\n1 ps [-e -f] -e 显示全部的进程 -f 以完全格式化的形式展示信息 一般固定写法ps -ef UID 进程所属的用户的ID\nPID 进程的进程号ID\nPPID 进程的父进程的ID\nC：此进程的CPU占用率\nSTIME 进程的启动时间\nTTY 启动此进程的终端序号，如显示? 表示非终端启动\nTIME 进程占用CPU的时间\nCMD 进程的启动命令或启动命令\n关闭进程\n1 kill [-9] 进程ID -9 表示强制关闭进程\n11.主机状态 查看系统资源占用\n1 top #查看占用 每5秒刷新一次 PID:进程id USER:进程所属用户. PR:进程优先级，越小越高 NI:负值表示高优先级,正表示低优先级 VIRT:进程使用虚拟内存,单位KB RES:进程使用物理内存,单位KB SHR:进程使用共享内存,单位KB S:进程状态(S休眠,R运行,Z僵死状态,N负数优先级,l空闲状态) %CPU:进程占用CPU率 %MEM:进程占用内存率 TIME+:进程使用CPU时间总计，单位10毫秒 COMMAND:;进程的命令或名称诚程序文件路径 top命令也支持选项: 选项 功能\n-p只显示某个进程的信息 -d设置刷新时间，默认是5s -c显示产生进程的完整命令，默认是进程名 -n指定刷新次数，比如 top -n 3，刷新输出3次后退出 -b，以非交互非全屏模式运行，以批次的方式执行top，一般配合-n指定输出几次统计信息，将输出重定向到指定文件，比如top -b -n 3 \u0026gt; /tmp/top.tmp -i不显示任何闲置( idle)或无用(zombie)的进程 -u查找特定用户启动的进程 当top以交互式运行（非-b选项启动)，可以用以下交互式命令进行控制按键功能\nh键\t按下h键，会显示帮助画面 c键\t按下c键，会显示产生进程的完整命令，等同于-c参数，再次按下c键，变为默认显示 f键 按下f键，可以选择需要展示的项目 M键\t按下M键，根据驻留内存大小(RES）排序 P键 按下P键，根据CPU使用百分比大小进行排序 T键\t按下T键，根据时间/累计时间进行排序 E键\t按下E键，切换顶部内存显示单位 e键\t按下e键，切换进程内存显示单位 l键\t按下l键，切换显示平均负载和启动时间信息。 i键\t按下i键，不显示闲置或无用的进程，等同于-i参数，再次按下，变为默认显示 t键\t按下t键，切换显示CPU状态信息 m\t键按下m键，切换显示内存信息 磁盘信息监控\n1 df [-h] #查看磁盘的使用情况 -h 以更加人性化的单位显示 1 iostat [-x] [num1] [num2] -x 显示更多信息 num1 刷新间隔 num2 刷新几次 网络状态监控\n1 sar -n DEV num1 num2 -n查看网络 DEV表示查看网络接口 num1num2同上 12.环境变量 env 命令查看当前系统中的环境变量\n**PATH **\nPTAH记录了系统执行任何命令的搜索路径\n$符号用于取环境变量的值\n1 2 echo $PATH echo ${PATH}ABC #输出PATH的值并拼接上ABC 设置环境变量\n临时设置\n1 export 变量名=变量值 永久生效\n针对当前用户，配置在当前用户的 ~/.bashrc 文件中中\n针对所有用户，配置在系统的 /etc/profile文件中\n在文件中插入\n1 export 变量名=值 通过语法source 配置文件 进行立刻生效，或重新登录shell\n自定义环境变量PATH\n临时\n1 export PATH=$PATH:文件路径 永久就将命令写入配置文件中\n13.上传下载 通过rz sz命令进行传输\n安装rz sz\n1 yum -y install lrzsz 下载文件到主机\n1 sz 文件路径 从主机上传到linux\n1 rz #然后从跳出的窗口下载 不推荐 14.压缩解压 .tar 称为tarball，归档文件，压缩后相比源文件没有太多体积减小\n.gz(.tar.gz)gzip格式压缩文件，采用gzip算法，可以极大的减小体积\ntar命令\n1 tar [-c -z -x -v -f -C] 参数1 参数2 ...... 参数n -c 创建压缩文件 -v 显示压缩，解压过程，用于显示进度 -x，解压文件 -f 要创建的文件，或者要解压的文件，-f选项必须在所有选项中最后一个 -z gzip模式 不使用就是tarball模式 -C 选择解压的目的地，用于解压模式 zip命令\n1 zip [-r] 参数1 参数2 ..... 参数n -r 被压缩的带文件夹 要用 1 zip test.zip 文件1 文件2 解压\n1 unzip [-d] zip文件 -d 指定要解压去的位置\n1 2 unzip test.zip unzip test.zip -d /home/root 第五章 实战 部署各种软件 1. 安装mysql 安装mysql5.7 centos 安装\n1 2 3 4 5 6 #更新密钥 rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2022 #安装Mysql yum仓库 rpm -Uvh http://repo.mysql.com//mysql57-community-release-el7-7.noarch.rpm #yum安装Mysql yum -y install mysql-community-server 启动mysql并配置为开机启动\n1 2 3 4 systemctl start mysqld systemctl enable mysqld #检查状态 systemctl status mysqld 配置MySQL\n1.获取初始密码\n1 2 #通过grep 获取初始密码 grep \u0026#34;temporary password\u0026#34; /var/log/mysqld.log 2.登录MySQL数据库\n1 2 3 mysql -uroot -p #-u登录的用户 root #-p 表示密码登录 ","date":"2023-04-02T21:08:47+08:00","permalink":"https://blog.132632.xyz/p/linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","title":"Linux学习笔记"},{"content":"位运算符(待定) 逻辑运算符 1 2 3 4 5 \u0026gt; \u0026lt; \u0026gt;= \u0026lt;= == 赋值运算符 1 2 3 4 5 6 = += -= /= *= %= ","date":"2023-02-24T17:43:40Z","permalink":"https://blog.132632.xyz/p/golang%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E8%BF%90%E7%AE%97%E7%AC%A6/","title":"Golang学习笔记:运算符"},{"content":"apt install wget\n换源\n1 2 3 4 5 6 7 8 9 mkdir /opt/alist \u0026amp;\u0026amp; cd /opt/alist wget https://github.com/alist-org/alist/releases/download/v3.11.0/alist-linux-arm64.tar.gz tar -zxvf alist-linux-arm64.tar.gz \u0026amp;\u0026amp; rm alist-linux-arm64.tar.gz chmod +x alist ./alist admin 记下 账号密码\nnohup ./alist server\n访问\n欧克！\ncd /opt \u0026amp;\u0026amp; wget https://github.com/fatedier/frp/releases/download/v0.47.0/frp_0.47.0_linux_arm64.tar.gz \u0026amp;\u0026amp; tar -zxvf frp_0.47.0_linux_arm64.tar.gz \u0026amp;\u0026amp; rm frp_0.47.0_linux_arm64.tar.gz \u0026amp;\u0026amp; mv frp_0.47.0_linux_arm64 frp\n","date":"2023-02-24T15:58:00+08:00","permalink":"https://blog.132632.xyz/p/linux%E5%AE%89%E8%A3%85alist/","title":"Linux安装alist"},{"content":"python\n1 sudo apt update 1 sudo apt install build-essential zlib1g-dev libncurses5-dev libgdbm-dev libnss3-dev libssl-dev libreadline-dev libffi-dev libsqlite3-dev wget libbz2-dev -y 1 sudo ./configure --enable-optimizations 1 sudo make -j 4 值“**4”**表示可以使用该命令确认的 CPU 内核数。根据系统上存在的 CPU 内核数调整此值。nproc\nmake altinstall python3.10\nln -s /usr/local/bin/python3.10 /usr/bin/python3 ln -s /usr/local/bin/pip3.10 /usr/bin/pip3\nln -s /usr/local/bin/python3.10 /usr/bin/python ln -s /usr/local/bin/pip3.10 /usr/bin/pip\n","date":"2023-02-19T19:58:28Z","permalink":"https://blog.132632.xyz/p/debian10%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85python3%E6%95%99%E7%A8%8B/","title":"Debian10编译安装Python3教程"},{"content":" 1 sudo apt update \u0026amp;\u0026amp; sudo apt upgrade -y 1.更换debian软件源(参考Debian 10 更换国内源 (中科大、网易源、阿里云) - 简书 (jianshu.com))\napt install wget curl -y\n2.修复systemd (参考解决chroot运行的系统无法使用systemd服务 - 兮陌｜薛叶 (simaek.com))\n3.安装alist\n1 2 3 4 5 6 7 8 9 10 cd /opt mkdir alist cd alist wget https://github.com/alist-org/alist/releases/download/v3.11.0/alist-linux-arm64.tar.gz tar -zxvf alist-xxxx.tar.gz chmod +x alist ","date":"2023-02-18T21:51:00+08:00","permalink":"https://blog.132632.xyz/p/%E8%AE%B0%E4%B8%80%E6%AC%A1chroot%E5%AE%B9%E5%99%A8%E5%AE%89%E8%A3%85alist/","title":"记一次chroot容器安装alist"},{"content":"变量 变量功能与类型 变量（Variable）的功能是存储数据。不同的变量保存的数据类型可能会不一样。经过半个多世纪的发展，编程语言已经基本形成了一套固定的类型，常见变量的数据类型有：整型、浮点型、布尔型等。\n变量声明 Go语言中的变量需要声明后才能使用，同一作用域内不支持重复声明。 并且Go语言的变量声明后必须使用。\n标准声明: var 变量名 变量类型\n声明并初始化: var 变量名 (变量类型) = 值 类型推导 : Go语言各异根据等号右边的值来推导变量类型\n短声明: 变量名 := 值 Go编译器会自动推到类型\n批量声明: 1 2 3 4 5 6 7 var ( 变量名 (类型) (= 值) 变量名 (类型) (= 值) ) 变量名1,变量名2 := 值1,值2 全局变量 全局变量即是将变量声明放在函数之外。\n声明为全局变量之后，该变量可以不使用。\n全局跨包变量 在当前项目中创建一个version目录，在version目录中创建version.go 变量名首字母要大写\n1 2 3 4 5 package version var ( Version int = 2 ) 在主程序中就可以引入该包进行使用。\n匿名变量 在使用多重赋值时，如果想要忽略某个值，可以使用匿名变量（anonymous variable）。 匿名变量用一个下划线_表示。\n匿名变量不占用命名空间，不会分配内存，所以匿名变量之间不存在重复声明。\n注意事项： 函数外的每个语句都必须以关键字开始（var、const、func等） :=不能使用在函数外。 _多用于占位，表示忽略值。 实例: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 package main import ( \u0026#34;fmt\u0026#34; \u0026#34;go_study/version\u0026#34; ) //全局变量 var gobal = \u0026#34;全局变量\u0026#34; //函数 func foo() (int, string) { return 10, \u0026#34;string\u0026#34; } func main() { //标准声明 var 变量名 数据类型 var name1 string //声明并初始化 var name2 int = 123 //自动推到 var name3 = 123.456 //短声明 变量名字 := 数据 name4 := 123.456 //批量声明 var name5, name6 int = 12, 34 var name7, name8 = \u0026#34;name7\u0026#34;, false var ( name9 string name10 byte = \u0026#39;A\u0026#39; name11 = 123 ) name12, name13 := 123.6, \u0026#34;name13\u0026#34; //匿名变量 x, _ := foo() _, y := foo() fmt.Println(name1) fmt.Println(name2) fmt.Println(name3) fmt.Println(name4) fmt.Println(name5) fmt.Println(name6) fmt.Println(name7) fmt.Println(name8) fmt.Println(name9) fmt.Println(name10) fmt.Println(name11) fmt.Println(name12) fmt.Println(name13) fmt.Println(\u0026#34;x=\u0026#34;, x) fmt.Println(\u0026#34;y=\u0026#34;, y) fmt.Println(version.Version) } 常量 常量声明 常量类似变量声明，但常量声明后不可修改，常量在定义的时候必须赋值；类型也可自动推导(即隐式类型定义)。\nconst 常量名 (类型) = 值\n多个常量可以如下声明\n1 2 3 4 5 6 const ( name1 int pi = 3.14 str string = \u0026#34;333asd\u0026#34; ) const c_name1, c_name2 = value1, value2 const同时声明多个常量时，如果省略了值则表示和上面一行的值相同\n1 2 3 4 5 const ( c1 = 100 c2 c3 ) 上面示例中 c1 c2 c3的值都是100\niota iota是go语言的常量计数器，只能在常量的表达式中使用。\niota在const关键字出现时将被重置为0。const中每新增一行常量声明将使iota计数一次(iota可理解为const语句块中的行索引)。 使用iota能简化定义，在定义枚举时很有用。\n1 2 3 4 5 6 7 8 9 10 11 const ( n0 = iota //0 n1\t//1 n2 = iota//2 n3\t//3 _\t//使用 _ 跳过某些值 n5\t//5 n6 = 100 //iota中间插队 n7\t//100 n8 = iota // 8 ) 基本数据类型(待定) 整数类型 int 浮点数类型 布尔类型 Go语言中以bool类型进行声明布尔型数据，布尔型数据只有true（真）和false（假）两个值。\n注意：\n布尔类型变量的默认值为false。 Go 语言中不允许将整型强制转换为布尔型. 布尔型无法参与数值运算，也无法与其他类型进行转换。 字符类型 字符串类型 Go语言中的字符串以原生数据类型出现，使用字符串就像使用其他原生数据类型（int、bool、float32、float64 等）一样。 Go 语言里的字符串的内部实现使用UTF-8编码。 字符串的值为双引号(\u0026quot;)中的内容，可以在Go语言的源码中直接添加非ASCII码字符，例如：\n1 2 s1 := \u0026#34;hello\u0026#34; s2 := \u0026#34;你好\u0026#34; ","date":"2023-02-07T17:01:21Z","permalink":"https://blog.132632.xyz/p/golang%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%9B%9B%E5%8F%98%E9%87%8F%E5%B8%B8%E9%87%8F%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/","title":"Golang学习笔记(四):变量、常量、基本数据类型"},{"content":"注释 1 2 3 4 5 // 单行注释 /* 多行注释 123 */ IDE中添加注释快捷键 Ctrl + / （Command + /）\n在IDE的加持下 添加注释会让函数 变量等表意更清晰\n转义字符 常用转义字符 意义 \\' 单引号 \\” 双引号 \\\\ 反斜杠 \\r 回车符(返回行首) \\n 换行符 \\b 退格 \\a 报警声(有提示声音) \\f 换页 \\t 制表符(相当于编程时按一下Tab) \\v 垂直制表符 引号 双引号 双引号表示一个字符串，双引号内包含转义字符可以转义\n单引号 单引号中只能有一个字符\n反引号 Go在处理反引号(``)中内容时会愿意输出 反引号键在ESC下面\n例:\n1 2 fmt.Println(`//\\\\ \\n`) 执行后输出为 //\\\\ \\n 字符串 格式化字符串 Print 函数直接输出内容\nPrintf 格式化输出字符串\nPrintln 会在输出内容的结尾添加一个换行符\nPrintf和Println是用到最多的输出\n字符串连接 Go 语言的字符串连接可以通过 + 实现\n格式化字符串、字符串连接例子: 1 2 3 4 5 6 7 8 9 10 11 12 package main import \u0026#34;fmt\u0026#34; func main() { name := \u0026#34;张三\u0026#34; age := \u0026#34;80\u0026#34; fmt.Print(\u0026#34;你的名字是:\u0026#34; + name + \u0026#34;，年龄是:\u0026#34; + age + \u0026#34;\\n\u0026#34;) fmt.Println(\u0026#34;你的名字是:\u0026#34; + name + \u0026#34;，年龄是:\u0026#34; + age) fmt.Printf(\u0026#34;你的名字是:\u0026#34; + name + \u0026#34;，年龄是:\u0026#34; + age + \u0026#34;\\n\u0026#34;) fmt.Printf(\u0026#34;你的名字是:%s，年龄是:%s\\n\u0026#34;, name, age) } 输出为:\n1 2 3 4 你的名字是:张三，年龄是:80 你的名字是:张三，年龄是:80 你的名字是:张三，年龄是:80 你的名字是:张三，年龄是:80 格式化表 %v 按值的本来值输出 %+v 在 %v 基础上，对结构体字段名和值进行展开 %#v 输出 Go 语言语法格式的值 %T 输出 Go 语言语法格式的类型和值 %% 输出 % 本体 %b（oOdxX） 整型的不同进制方式显示 %U Unicode 字符 %s 字符串 %d 整数 %f 浮点数 (%.2f 输出保留两位小数) %p 指针，十六进制方式显示 例子来自枫枫知道\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 package main import ( \u0026#34;fmt\u0026#34; \u0026#34;os\u0026#34; ) type student struct { name string age int weight float32 } type point struct { x, y int } func main() { s := student{name: \u0026#34;孙悟空\u0026#34;, age: 500, weight: 1000.89} fmt.Printf(\u0026#34;student struct %%v %v\\n\u0026#34;, s) fmt.Printf(\u0026#34;student struct %%+v %+v\\n\u0026#34;, s) fmt.Printf(\u0026#34;student struct %%#v %#v\\n\u0026#34;, s) fmt.Printf(\u0026#34;student struct %%T %T\\n\u0026#34;, s) fmt.Printf(\u0026#34;student age %%b %b\\n\u0026#34;, s.age) sp := \u0026amp;student{name: \u0026#34;猪八戒\u0026#34;, age: 500, weight: 800.99} fmt.Printf(\u0026#34;student struct %%v %v\\n\u0026#34;, sp) fmt.Printf(\u0026#34;student struct %%+v %+v\\n\u0026#34;, sp) fmt.Printf(\u0026#34;student struct %%#v %#v\\n\u0026#34;, sp) fmt.Printf(\u0026#34;student struct %%p %p\\n\u0026#34;, sp) fmt.Printf(\u0026#34;student struct %%T %T\\n\u0026#34;, sp) p := point{1, 2} fmt.Printf(\u0026#34;%v\\n\u0026#34;, p) fmt.Printf(\u0026#34;%+v\\n\u0026#34;, p) fmt.Printf(\u0026#34;%#v\\n\u0026#34;, p) fmt.Printf(\u0026#34;%T\\n\u0026#34;, p) fmt.Printf(\u0026#34;%t\\n\u0026#34;, true) fmt.Printf(\u0026#34;%d\\n\u0026#34;, 123) fmt.Printf(\u0026#34;%b\\n\u0026#34;, 14) fmt.Printf(\u0026#34;%c\\n\u0026#34;, 33) fmt.Printf(\u0026#34;%x\\n\u0026#34;, 456) fmt.Printf(\u0026#34;%f\\n\u0026#34;, 78.9) fmt.Printf(\u0026#34;%e\\n\u0026#34;, 123400000.0) fmt.Printf(\u0026#34;%E\\n\u0026#34;, 123400000.0) fmt.Printf(\u0026#34;%s\\n\u0026#34;, \u0026#34;\\\u0026#34;string\\\u0026#34;\u0026#34;) fmt.Printf(\u0026#34;%q\\n\u0026#34;, \u0026#34;\\\u0026#34;string\\\u0026#34;\u0026#34;) fmt.Printf(\u0026#34;%x\\n\u0026#34;, \u0026#34;hex this\u0026#34;) fmt.Printf(\u0026#34;%p\\n\u0026#34;, \u0026amp;p) fmt.Printf(\u0026#34;|%6d|%6d|\\n\u0026#34;, 12, 345) fmt.Printf(\u0026#34;|%6.2f|%6.2f|\\n\u0026#34;, 1.2, 3.45) fmt.Printf(\u0026#34;|%-6.2f|%-6.2f|\\n\u0026#34;, 1.2, 3.45) fmt.Printf(\u0026#34;|%6s|%6s|\\n\u0026#34;, \u0026#34;foo\u0026#34;, \u0026#34;b\u0026#34;) fmt.Printf(\u0026#34;|%-6s|%-6s|\\n\u0026#34;, \u0026#34;foo\u0026#34;, \u0026#34;b\u0026#34;) ss := fmt.Sprintf(\u0026#34;a %s\u0026#34;, \u0026#34;string\u0026#34;) fmt.Println(ss) fmt.Fprintf(os.Stderr, \u0026#34;an %s\\n\u0026#34;, \u0026#34;error\u0026#34;) for _, r := range \u0026#34;123qbc中午\u0026#34; { cvt := string(r) if r \u0026gt;= 128 { cvt = fmt.Sprintf(\u0026#34;\\\\u%04x\u0026#34;, int64(r)) } println(cvt) } } 标识符与关键字 标识符 在编程语言中标识符就是程序员定义的具有特殊意义的词，比如变量名、常量名、函数名等等。 Go语言中标识符由字母数字和_(下划线）组成，并且只能以字母和_开头。 举几个例子：abc, _, _123, a123。\n关键字 关键字是指编程语言中预先定义好的具有特殊含义的标识符。 关键字和保留字都不建议用作变量名。\nGo语言中有25个关键字：\n1 2 3 4 5 break default func interface select case defer go map struct chan else goto package switch const fallthrough if range type continue for import return var 此外，Go语言中还有37个保留字。\n1 2 3 4 5 6 7 8 9 10 Constants: true false iota nil Types: int int8 int16 int32 int64 uint uint8 uint16 uint32 uint64 uintptr float32 float64 complex128 complex64 bool byte rune string error Functions: make len cap new append copy close delete complex real imag panic recover ","date":"2023-02-06T22:25:21Z","permalink":"https://blog.132632.xyz/p/golang%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%89go%E8%AF%AD%E8%A8%80%E7%BB%93%E6%9E%84%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/","title":"Golang学习笔记(三):Go语言结构、基础语法"},{"content":" 1 go mod init xxx //初始化一个xxx项目 go.mod文件内结构\n1 2 3 4 5 6 7 module xxx go 1.19 require ( github.com/xxxx/xx v1.0 //indirect ) moduble用来定义包名\ngo后跟项目使用的golang版本\nrequire 用来定义依赖的包和包的版本\nindirect表示间接引用\ngo.sum\n1 2 3 包名 包版本 哈希值 例子： github.com/lucasb-eyer/go-colorful v1.2.0 h1:1nnpGOrhyZZuNyfu1QjKiUICQ74+3FNCN69Aj6K7nkY= ","date":"2023-02-04T12:59:03Z","permalink":"https://blog.132632.xyz/p/golang%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%BA%8Cgomodules/","title":"Golang学习笔记(二):GoModules"},{"content":"一、鸣谢 感谢七米老师能够更新出一套优秀的Golang教程 让我在学习最新的Golang中少走弯路 七米老师Bilibili空间：https://space.bilibili.com/4638193/dynamic 七米老师的Blog : https://www.liwenzhou.com/\n二、Golang SDK的安装(Windows and Mac) 1.从Golang官网上下载可执行文件安装 参考七米老师的Blog https://www.liwenzhou.com/posts/Go/install/\n2.通过包管理器安装 Windows（使用Winget安装） 1.先打开CMD 2.输入winget search golang 可以看到有提供Golang的诸多版本 我这里下载最新的(Go 1.19) 3.输入 winget install [ID] -i 我这里下载Go 1.19就输入 winget install GoLang.Go.1.19 -i 4.接下来就和第一种方式一样了（不加-i不会有安装引导窗口）\nMac (使用Homebrew安装) 1.Homebrew国内安装参考https://zhuanlan.zhihu.com/p/111014448 2.打开终端输入 brew install golang 静待完成即可\n3.检验是否安装成功 在终端输入 go version 提示 go version go1.19.5 windows/amd64 之类的即为安装成功\n三、配置修改 现在的版本不需要设置GOROOT和GOPATH了 用GOMOD就行\n终端输入 go env -w GOPROXY=https://goproxy.cn,direct 修改国内代理为七牛\n四、Hello World 1.新建工程文件夹 HelloWorld 2.在此目录下打开终端 输入 go mod init HelloWorld 3.新建文件 main.go 4.把以下代码输入到此文件里\n1 2 3 4 5 6 7 package main // 声明 main 包，表明当前是一个可执行程序 import \u0026#34;fmt\u0026#34; // 导入内置 fmt 包 func main(){ // main函数，是程序执行的入口 fmt.Println(\u0026#34;Hello World!\u0026#34;) // 在终端打印 Hello World! } 5.终端执行go run main.go 显示Hello World! 表示SDK安装完成\n","date":"2023-01-22T16:44:40Z","permalink":"https://blog.132632.xyz/p/golang%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/","title":"Golang学习笔记(一):环境搭建"},{"content":"1.Keil5安装与破解 1.C51 Version 9.61 Evaluation Software Request (keil.com)\n从这里下载最新版Keil5-c51\n2.破解软件地址:[点我下载]((https://raw.githubusercontent.com/mengdiao/PicStore/main/img/202302062219944.exe)\n3.安装破解步骤参考http://t.csdn.cn/UxlLz\n2.下载stc-isp 打开stc官网\n下拉找到\n下载最新版\n然后拖到桌面打开就能用\n3.向keil5里添加STC器件数据 虽说AT的也能用但是还是添加一下比较好\n1.双击打开STC-ISP\n2.点Keil仿真设置\n3.点击图中这个按钮\n4.然后选择keil安装路径\nOK！ new project的时候就可以从这里看到了\n","date":"2023-01-14T00:36:37Z","permalink":"https://blog.132632.xyz/p/51%E5%8D%95%E7%89%87%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/","title":"51单片机学习笔记(1)-开发环境部署"},{"content":"1.Keil5安装与破解 1.C51 Version 9.61 Evaluation Software Request (keil.com)\n从这里下载最新版Keil5-c51\n2.破解软件地址:[点我下载]((https://raw.githubusercontent.com/mengdiao/PicStore/main/img/202302062219944.exe)\n3.安装破解步骤参考http://t.csdn.cn/UxlLz\n2.下载stc-isp 打开stc官网\n下拉找到\n下载最新版\n然后拖到桌面打开就能用\n3.向keil5里添加STC器件数据 虽说AT的也能用但是还是添加一下比较好\n1.双击打开STC-ISP\n2.点Keil仿真设置\n3.点击图中这个按钮\n4.然后选择keil安装路径\nOK！ new project的时候就可以从这里看到了\n","date":"2023-01-14T00:36:37+08:00","permalink":"https://blog.132632.xyz/p/51%E5%8D%95%E7%89%87%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/","title":" 51单片机学习笔记(1)-开发环境部署"},{"content":"一、题目要求 用户输入为棋盘坐标 逻辑判断正确 棋盘打印美观 二、题目分析 根据题目分析，代码可以分为棋盘打印 用户输入处理 逻辑判断 数据储存几个块 具体关系如图所示 三、代码实践 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 package main import ( \u0026#34;fmt\u0026#34; \u0026#34;os\u0026#34; \u0026#34;os/exec\u0026#34; ) var Board = [3][3]int{} var X int var Y int var Counter int func ClearDisplay() { cmd := exec.Command(\u0026#34;cmd\u0026#34;, \u0026#34;/c\u0026#34;, \u0026#34;cls\u0026#34;) cmd.Stdout = os.Stdout cmd.Run() } func Judgement() int { //当前行判断 if Board[Y][0]+Board[Y][1]+Board[Y][2] == 3 || Board[Y][0]+Board[Y][1]+Board[Y][2] == -3 { return 1 } //当前列判断 if Board[0][X]+Board[1][X]+Board[2][X] == 3 || Board[0][X]+Board[1][X]+Board[2][X] == -3 { return 1 } //两个斜线判断 if Board[0][0]+Board[1][1]+Board[2][2] == 3 || Board[2][0]+Board[1][1]+Board[0][2] == 3 { return 1 } if Board[0][0]+Board[1][1]+Board[2][2] == -3 || Board[2][0]+Board[1][1]+Board[0][2] == -3 { return 1 } //平局 if Counter == 9 { return 2 } return 0 } func PrintBoard() { fmt.Println(\u0026#34;已进行\u0026#34;, Counter, \u0026#34;回合\u0026#34;) if Counter%2 == 0 { println(\u0026#34;请o落子\u0026#34;) } else { println(\u0026#34;请x落子\u0026#34;) } fmt.Println(\u0026#34;Y\u0026#34;) //控制列 for y := 2; y \u0026gt; -1; y-- { fmt.Printf(\u0026#34;%d \u0026#34;, y+1) //打印出当前行 for x := 0; x \u0026lt; 3; x++ { switch Board[y][x] { case -1: fmt.Printf(\u0026#34; o \u0026#34;) case 0: fmt.Printf(\u0026#34; _ \u0026#34;) case 1: fmt.Printf(\u0026#34; x \u0026#34;) } } //打印完Y行后 fmt.Printf(\u0026#34;\\n\u0026#34;) } fmt.Println(\u0026#34; 1 2 3 X\u0026#34;) } func PlayerMove() { for { fmt.Printf(\u0026#34;请输入X轴坐标:\u0026#34;) fmt.Scanln(\u0026amp;X) fmt.Printf(\u0026#34;请输入Y轴坐标:\u0026#34;) fmt.Scanln(\u0026amp;Y) X = X - 1 Y = Y - 1 //用户输入坐标合法判断 if X \u0026gt; -1 \u0026amp;\u0026amp; X \u0026lt; 3 \u0026amp;\u0026amp; Y \u0026gt; -1 \u0026amp;\u0026amp; Y \u0026lt; 3 { if Board[Y][X] == 0 { if Counter%2 == 0 { Board[Y][X] = -1 } else { Board[Y][X] = 1 } break } else { println(\u0026#34;位置已占用，请重新输入!\u0026#34;) } } else { println(\u0026#34;输入不合法，请重新输入!\u0026#34;) } } } func main() { var judge = 0 for { PrintBoard() PlayerMove() Counter++ judge = Judgement() if judge != 0 { if judge == 2 { fmt.Println(\u0026#34;平局！\u0026#34;) } else { if (Counter-1)%2 == 0 { fmt.Println(\u0026#34;恭喜 o 方胜利！\u0026#34;) } else { fmt.Println(\u0026#34;恭喜 x 方胜利！\u0026#34;) } } fmt.Println(\u0026#34;共进行\u0026#34;, Counter, \u0026#34;回合\u0026#34;) break } ClearDisplay() } } ","date":"2022-12-19T02:22:06Z","permalink":"https://blog.132632.xyz/p/go%E5%9F%BA%E7%A1%80%E7%BB%83%E4%B9%A0-%E4%BA%95%E5%AD%97%E6%A3%8B/","title":"Go基础练习-井字棋"},{"content":"一、题目要求 用户输入为棋盘坐标 逻辑判断正确 棋盘打印美观 二、题目分析 根据题目分析，代码可以分为棋盘打印 用户输入处理 逻辑判断 数据储存几个块 具体关系如图所示 三、代码实践 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 package main import ( \u0026#34;fmt\u0026#34; \u0026#34;os\u0026#34; \u0026#34;os/exec\u0026#34; ) var Board = [3][3]int{} var X int var Y int var Counter int func ClearDisplay() { cmd := exec.Command(\u0026#34;cmd\u0026#34;, \u0026#34;/c\u0026#34;, \u0026#34;cls\u0026#34;) cmd.Stdout = os.Stdout cmd.Run() } func Judgement() int { //当前行判断 if Board[Y][0]+Board[Y][1]+Board[Y][2] == 3 || Board[Y][0]+Board[Y][1]+Board[Y][2] == -3 { return 1 } //当前列判断 if Board[0][X]+Board[1][X]+Board[2][X] == 3 || Board[0][X]+Board[1][X]+Board[2][X] == -3 { return 1 } //两个斜线判断 if Board[0][0]+Board[1][1]+Board[2][2] == 3 || Board[2][0]+Board[1][1]+Board[0][2] == 3 { return 1 } if Board[0][0]+Board[1][1]+Board[2][2] == -3 || Board[2][0]+Board[1][1]+Board[0][2] == -3 { return 1 } //平局 if Counter == 9 { return 2 } return 0 } func PrintBoard() { fmt.Println(\u0026#34;已进行\u0026#34;, Counter, \u0026#34;回合\u0026#34;) if Counter%2 == 0 { println(\u0026#34;请o落子\u0026#34;) } else { println(\u0026#34;请x落子\u0026#34;) } fmt.Println(\u0026#34;Y\u0026#34;) //控制列 for y := 2; y \u0026gt; -1; y-- { fmt.Printf(\u0026#34;%d \u0026#34;, y+1) //打印出当前行 for x := 0; x \u0026lt; 3; x++ { switch Board[y][x] { case -1: fmt.Printf(\u0026#34; o \u0026#34;) case 0: fmt.Printf(\u0026#34; _ \u0026#34;) case 1: fmt.Printf(\u0026#34; x \u0026#34;) } } //打印完Y行后 fmt.Printf(\u0026#34;\\n\u0026#34;) } fmt.Println(\u0026#34; 1 2 3 X\u0026#34;) } func PlayerMove() { for { fmt.Printf(\u0026#34;请输入X轴坐标:\u0026#34;) fmt.Scanln(\u0026amp;X) fmt.Printf(\u0026#34;请输入Y轴坐标:\u0026#34;) fmt.Scanln(\u0026amp;Y) X = X - 1 Y = Y - 1 //用户输入坐标合法判断 if X \u0026gt; -1 \u0026amp;\u0026amp; X \u0026lt; 3 \u0026amp;\u0026amp; Y \u0026gt; -1 \u0026amp;\u0026amp; Y \u0026lt; 3 { if Board[Y][X] == 0 { if Counter%2 == 0 { Board[Y][X] = -1 } else { Board[Y][X] = 1 } break } else { println(\u0026#34;位置已占用，请重新输入!\u0026#34;) } } else { println(\u0026#34;输入不合法，请重新输入!\u0026#34;) } } } func main() { var judge = 0 for { PrintBoard() PlayerMove() Counter++ judge = Judgement() if judge != 0 { if judge == 2 { fmt.Println(\u0026#34;平局！\u0026#34;) } else { if (Counter-1)%2 == 0 { fmt.Println(\u0026#34;恭喜 o 方胜利！\u0026#34;) } else { fmt.Println(\u0026#34;恭喜 x 方胜利！\u0026#34;) } } fmt.Println(\u0026#34;共进行\u0026#34;, Counter, \u0026#34;回合\u0026#34;) break } ClearDisplay() } } ","date":"2022-12-19T02:22:06+08:00","permalink":"https://blog.132632.xyz/p/go%E5%9F%BA%E7%A1%80%E7%BB%83%E4%B9%A0-%E4%BA%95%E5%AD%97%E6%A3%8B/","title":" Go基础练习-井字棋"},{"content":"正文测试 而这些并不是完全重要，更加重要的问题是， 带着这些问题，我们来审视一下学生会退会。 既然如何， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 我们不得不面对一个非常尴尬的事实，那就是， 可是，即使是这样，学生会退会的出现仍然代表了一定的意义。 学生会退会，发生了会如何，不发生又会如何。 经过上述讨论， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 学生会退会，到底应该如何实现。 这样看来， 在这种困难的抉择下，本人思来想去，寝食难安。 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 就我个人来说，学生会退会对我的意义，不能不说非常重大。 莎士比亚曾经提到过，人的一生是短的，但如果卑劣地过这一生，就太长了。这似乎解答了我的疑惑。 莫扎特说过一句富有哲理的话，谁和我一样用功，谁就会和我一样成功。这启发了我， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 学生会退会，到底应该如何实现。 一般来说， 从这个角度来看， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 在这种困难的抉择下，本人思来想去，寝食难安。 了解清楚学生会退会到底是一种怎么样的存在，是解决一切问题的关键。 一般来说， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 问题的关键究竟为何？ 而这些并不是完全重要，更加重要的问题是。\n奥斯特洛夫斯基曾经说过，共同的事业，共同的斗争，可以使人们产生忍受一切的力量。　带着这句话，我们还要更加慎重的审视这个问题： 一般来讲，我们都必须务必慎重的考虑考虑。 既然如此， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 带着这些问题，我们来审视一下学生会退会。 我认为， 我认为， 在这种困难的抉择下，本人思来想去，寝食难安。 问题的关键究竟为何？ 每个人都不得不面对这些问题。 在面对这种问题时， 要想清楚，学生会退会，到底是一种怎么样的存在。 我认为， 既然如此， 每个人都不得不面对这些问题。 在面对这种问题时， 那么， 我认为， 学生会退会因何而发生。\n引用 思念是最暖的忧伤像一双翅膀\n让我停不了飞不远在过往游荡\n不告而别的你 就算为了我着想\n这么沉痛的呵护 我怎么能翱翔\n最暖的憂傷 - 田馥甄\n图片 1 2 3 ![Photo by Florian Klauer on Unsplash](florian-klauer-nptLmg6jqDo-unsplash.jpg) ![Photo by Luca Bravo on Unsplash](luca-bravo-alS7ewQ41M8-unsplash.jpg) ![Photo by Helena Hertz on Unsplash](helena-hertz-wWZzXlDpMog-unsplash.jpg) ![Photo by Hudai Gayiran on Unsplash](hudai-gayiran-3Od_VKcDEAA-unsplash.jpg) 相册语法来自 Typlog\n","date":"2020-09-09T00:00:00Z","image":"https://blog.132632.xyz/p/test-chinese/helena-hertz-wWZzXlDpMog-unsplash_hu4699868770670889127.jpg","permalink":"https://blog.132632.xyz/p/test-chinese/","title":"Chinese Test"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\nBlockquote with attribution Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\nTables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables Italics Bold Code italics bold code A B C D E F Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus ultricies, sapien non euismod aliquam, dui ligula tincidunt odio, at accumsan nulla sapien eget ex. Proin eleifend dictum ipsum, non euismod ipsum pulvinar et. Vivamus sollicitudin, quam in pulvinar aliquam, metus elit pretium purus Proin sit amet velit nec enim imperdiet vehicula. Ut bibendum vestibulum quam, eu egestas turpis gravida nec Sed scelerisque nec turpis vel viverra. Vivamus vitae pretium sapien Code Blocks Code block with backticks 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block with Hugo\u0026rsquo;s internal highlight shortcode 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Diff code block 1 2 3 4 5 [dependencies.bevy] git = \u0026#34;https://github.com/bevyengine/bevy\u0026#34; rev = \u0026#34;11f52b8c72fc3a568e8bb4a4cd1f3eb025ac2e13\u0026#34; - features = [\u0026#34;dynamic\u0026#34;] + features = [\u0026#34;jpeg\u0026#34;, \u0026#34;dynamic\u0026#34;] List Types Ordered List First item Second item Third item Unordered List List item Another item And another item Nested list Fruit Apple Orange Banana Dairy Milk Cheese Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL + ALT + Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nHyperlinked image The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2019-03-11T00:00:00Z","image":"https://blog.132632.xyz/p/markdown-syntax-guide/pawel-czerwinski-8uZPynIu-rQ-unsplash_hu6307248181568134095.jpg","permalink":"https://blog.132632.xyz/p/markdown-syntax-guide/","title":"Markdown Syntax Guide"},{"content":"Hugo ships with several Built-in Shortcodes for rich content, along with a Privacy Config and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.\nYouTube Privacy Enhanced Shortcode Twitter Simple Shortcode “In addition to being more logical, asymmetry has the advantage that its complete appearance is far more optically effective than symmetry.”\n— Jan Tschichold pic.twitter.com/gcv7SrhvJb\n\u0026mdash; Design Reviewed | Graphic Design History (@DesignReviewed) January 17, 2019 Vimeo Simple Shortcode bilibilibi Shortcode Gist Shortcode Gitlab Snippets Shortcode Quote Shortcode Stack adds a quote shortcode. For example:\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― A famous person, The book they wrote Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― Anonymous book Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― Some book Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n― Somebody","date":"2019-03-10T00:00:00Z","permalink":"https://blog.132632.xyz/p/rich-content/","title":"Rich Content"},{"content":"Lorem est tota propiore conpellat pectoribus de pectora summo.\nRedit teque digerit hominumque toris verebor lumina non cervice subde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc caluere tempus inhospita parcite confusaque translucet patri vestro qui optatis lumine cognoscere flos nubis! Fronde ipsamque patulos Dryopen deorum.\nExierant elisi ambit vivere dedere Duce pollice Eris modo Spargitque ferrea quos palude Rursus nulli murmur; hastile inridet ut ab gravi sententia! Nomine potitus silentia flumen, sustinet placuit petis in dilapsa erat sunt. Atria tractus malis.\nComas hunc haec pietate fetum procerum dixit Post torum vates letum Tiresia Flumen querellas Arcanaque montibus omnes Quidem et Vagus elidunt The Van de Graaf Canon\nMane refeci capiebant unda mulcebat Victa caducifer, malo vulnere contra dicere aurato, ludit regale, voca! Retorsit colit est profanae esse virescere furit nec; iaculi matertera et visa est, viribus. Divesque creatis, tecta novat collumque vulnus est, parvas. Faces illo pepulere tempus adest. Tendit flamma, ab opes virum sustinet, sidus sequendo urbis.\nIubar proles corpore raptos vero auctor imperium; sed et huic: manus caeli Lelegas tu lux. Verbis obstitit intus oblectamina fixis linguisque ausus sperare Echionides cornuaque tenent clausit possit. Omnia putatur. Praeteritae refert ausus; ferebant e primus lora nutat, vici quae mea ipse. Et iter nil spectatae vulnus haerentia iuste et exercebat, sui et.\nEurytus Hector, materna ipsumque ut Politen, nec, nate, ignari, vernum cohaesit sequitur. Vel mitis temploque vocatus, inque alis, oculos nomen non silvis corpore coniunx ne displicet illa. Crescunt non unus, vidit visa quantum inmiti flumina mortis facto sic: undique a alios vincula sunt iactata abdita! Suspenderat ego fuit tendit: luna, ante urbem Propoetides parte.\n","date":"2019-03-09T00:00:00Z","image":"https://blog.132632.xyz/p/placeholder-text/matt-le-SJSpo9hQf7s-unsplash_hu10664154974910995856.jpg","permalink":"https://blog.132632.xyz/p/placeholder-text/","title":"Placeholder Text"},{"content":"Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\nIn this example we will be using KaTeX\nCreate a partial under /layouts/partials/math.html Within this partial reference the Auto-render Extension or host these scripts locally. Include the partial in your templates like so: 1 2 3 {{ if or .Params.math .Site.Params.math }} {{ partial \u0026#34;math.html\u0026#34; . }} {{ end }} To enable KaTeX globally set the parameter math to true in a project\u0026rsquo;s configuration To enable KaTeX on a per page basis include the parameter math: true in content files Note: Use the online reference of Supported TeX Functions\nExamples Inline math: $\\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887…$\nBlock math: $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$","date":"2019-03-08T00:00:00Z","permalink":"https://blog.132632.xyz/p/math-typesetting/","title":"Math Typesetting"},{"content":"Emoji can be enabled in a Hugo project in a number of ways.\nThe emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site\u0026rsquo;s configuration and then you can type emoji shorthand codes directly in content files; e.g.\n🙈 :see_no_evil: 🙉 :hear_no_evil: 🙊 :speak_no_evil:\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\nN.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n1 2 3 .emoji { font-family: Apple Color Emoji, Segoe UI Emoji, NotoColorEmoji, Segoe UI Symbol, Android Emoji, EmojiSymbols; } ","date":"2019-03-05T00:00:00Z","image":"https://blog.132632.xyz/p/emoji-support/the-creative-exchange-d2zvqp3fpro-unsplash_hu5876398126655421130.jpg","permalink":"https://blog.132632.xyz/p/emoji-support/","title":"Emoji Support"}]